'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface LoadingMessage {
  text: string
  emoji: string
}

const loadingMessages: LoadingMessage[] = [
  { text: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞...", emoji: "üîç" },
  { text: "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º—Å—è —Å AI-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–º...", emoji: "ü§ñ" },
  { text: "–ò–∑—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã Dribbble...", emoji: "üé®" },
  { text: "–ú–∏–∫—Å—É–µ–º —Ü–≤–µ—Ç–∞ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–∏—Å—Ç–∞...", emoji: "‚òï" },
  { text: "–ü—Ä–∏–º–µ–Ω—è–µ–º –∑–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ...", emoji: "üìê" },
  { text: "–î–æ–±–∞–≤–ª—è–µ–º —â–µ–ø–æ—Ç–∫—É –∫—Ä–µ–∞—Ç–∏–≤–∞...", emoji: "‚ú®" },
  { text: "–ü–æ–ª–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –¥–æ –±–ª–µ—Å–∫–∞...", emoji: "üíé" },
  { text: "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! AI —Ä–∏—Å—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏...", emoji: "üñåÔ∏è" }
]

const designTips = [
  {
    title: "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?",
    text: "60% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—É–¥—è—Ç –æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –¥–∏–∑–∞–π–Ω—É —Å–∞–π—Ç–∞",
    icon: "üí°"
  },
  {
    title: "–°–æ–≤–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–∞:",
    text: "–ë–µ–ª–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ - –≤–∞—à –¥—Ä—É–≥. –ù–µ –±–æ–π—Ç–µ—Å—å '–ø—É—Å—Ç–æ—Ç—ã' –≤ –¥–∏–∑–∞–π–Ω–µ",
    icon: "üéØ"
  },
  {
    title: "–¢—Ä–µ–Ω–¥ 2024:",
    text: "–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è! –ù–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –±–æ–ª–µ–µ subtle –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ",
    icon: "üåà"
  },
  {
    title: "UX-–ø—Ä–∞–≤–∏–ª–æ:",
    text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç –∑–∞ 5 —Å–µ–∫—É–Ω–¥",
    icon: "‚è±Ô∏è"
  },
  {
    title: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ü–≤–µ—Ç–∞:",
    text: "–°–∏–Ω–∏–π –≤—ã–∑—ã–≤–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ, –∑–µ–ª–µ–Ω—ã–π - —Ä–æ—Å—Ç, –æ—Ä–∞–Ω–∂–µ–≤—ã–π - –¥–µ–π—Å—Ç–≤–∏–µ",
    icon: "üé®"
  }
]

export function LoadingMessages({ stage }: { stage: 'analysis' | 'generation' }) {
  const [messageIndex, setMessageIndex] = useState(0)
  const [tipIndex, setTipIndex] = useState(Math.floor(Math.random() * designTips.length))
  const [progressComplete, setProgressComplete] = useState(false)

  useEffect(() => {
    const interval = setInterval(() => {
      setMessageIndex((prev) => (prev + 1) % loadingMessages.length)
    }, 3000)

    return () => clearInterval(interval)
  }, [])

  const currentMessage = loadingMessages[messageIndex]
  const currentTip = designTips[tipIndex]

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞ */}
      <div className="relative">
        <motion.div
          animate={{
            scale: [1, 1.2, 1],
            rotate: [0, 180, 360],
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            ease: "easeInOut"
          }}
          className="text-6xl"
        >
          {stage === 'analysis' ? 'üîç' : 'üé®'}
        </motion.div>
        
        {/* –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ */}
        {[0, 1, 2].map((i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-2 bg-blue-500 rounded-full"
            style={{
              top: '50%',
              left: '50%',
            }}
            animate={{
              x: [0, 30 * Math.cos(i * 120 * Math.PI / 180), 0],
              y: [0, 30 * Math.sin(i * 120 * Math.PI / 180), 0],
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              delay: i * 0.4,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>

      {/* –ó–∞–±–∞–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <AnimatePresence mode="wait">
        <motion.div
          key={messageIndex}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.5 }}
          className="text-center"
        >
          <p className="text-xl font-medium text-gray-800">
            <span className="mr-2">{currentMessage.emoji}</span>
            {currentMessage.text}
          </p>
        </motion.div>
      </AnimatePresence>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
      <div className="w-64 h-2 bg-gray-200 rounded-full overflow-hidden">
        <motion.div
          className="h-full bg-gradient-to-r from-purple-600 to-blue-600"
          animate={{
            width: ["0%", "100%"],
          }}
          transition={{
            duration: 30,
            ease: "linear"
          }}
          onAnimationComplete={() => setProgressComplete(true)}
        />
      </div>
      
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
      {progressComplete && (
        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-sm text-gray-600 mt-3 font-medium"
        >
          –ï—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...
        </motion.p>
      )}

      {/* –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 2 }}
        className="max-w-md p-6 bg-gradient-to-br from-purple-50 to-blue-50 rounded-2xl border border-purple-100"
      >
        <div className="flex items-start space-x-3">
          <span className="text-2xl">{currentTip.icon}</span>
          <div>
            <h3 className="font-semibold text-gray-800 mb-1">{currentTip.title}</h3>
            <p className="text-sm text-gray-600">{currentTip.text}</p>
          </div>
        </div>
      </motion.div>

    </div>
  )
}